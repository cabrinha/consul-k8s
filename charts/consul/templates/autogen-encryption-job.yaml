{{- if .Values.global.gossipEncryption.autogenerate }}
# autogenerate encryption key for gossip protocol and save in Kubernetes secrets
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "consul.fullname" . }}-autogen-encryption
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "consul.name" . }}
    chart: {{ template "consul.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy":  hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      name: {{ template "consul.fullname" . }}-autogen-encryption
      labels:
        app: {{ template "consul.name" . }}
        chart: {{ template "consul.chart" . }}
        release: {{ .Release.Name }}
        component: autogen-encryption
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
    spec:
      restartPolicy: Never
      serviceAccountName: {{ template "consul.fullname" . }}-autogen-encryption
      containers:
        - name: autogen-encryption
          image: "{{ .Values.global.image }}"
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          workingDir: /tmp
          command:
            - "/bin/sh"
            - "-ec"
            - |
              $(consul keygen) > key.txt
              {{- if .Values.global.gossipEncryption.secretName }}
              secretName={{ .Values.global.gossipEncryption.secretName }}
              {{- else }}
              secretName={{ template "consul.fullname" . }}-gossip-encryption-key
              {{- end }}
              {{- if .Values.global.gossipEncryption.secretKey }}
              secretKey={{ .Values.global.gossipEncryption.secretKey }}
              {{- else }}
              secretKey=key
              {{- end }}
              # Check if secret already exists
              curl -s -X GET --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/${NAMESPACE}/secrets/${secretName}/data/${secretKey}
              # If secret does not exist, create it
              curl -s -X POST --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/${NAMESPACE}/secrets \
                -H "Authorization: Bearer $( cat /var/run/secrets/kubernetes.io/serviceaccount/token )" \
                -H "Content-Type: application/json" \
                -H "Accept: application/json" \
                # TODO put the key in a secret
                -d "{ \"kind\": \"Secret\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"${secretName}\", \"namespace\": \"${NAMESPACE}\" }, \"type\": \"Opaque\", \"data\": {  }}" > /dev/null
          resources:
            requests:
              memory: "50Mi"
              cpu: "50m"
            limits:
              memory: "50Mi"
              cpu: "50m"
{{- end }}
